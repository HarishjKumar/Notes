Web based application
-- HTML, JavaScript run on the client Side
-- JavaScript performs DOM manipulation to assign values and to retrieve values.
-- every DOM changes => DOM tree updated and page is re-rendered
-- 

Angular CLI
-- optionated tool, uses
----> WebPack --  build and developement tool
----> Jasmine -- JS Unit Testing Framework
----> Karma -- Unit Test Runner - Executes unit tests
----> TypeScript -- dev language
----> Protractor -- End-to-End testing utility based on Selenium WebDriver

----> Bootstrap CSS ony without the JS
----> Angular-Material CSS
----> Angular-Bootstrap
----> Ionic UI FrameWork

----> RxJs -- Pattern-Observable and subsriber - Asynch javascript code execution
		-- Based On Promises API

----> Ng-Redux -- state management utility
----> Node.js -- for the Dev Environment
-----> ng serve --open



//npm install package --save ==> adds a "dependencies"  == run time requirement
npm install package --save-dev ==> add a "devdependecies == compiletime reqt.

Modules in javascript
-- in javaScript, each file is treated as a module.
-- A file exports types or functions so that other files (modules) can import them and use them
-- only those types are functions that are exported from one file can be imported by other files.
--import or require statements to import the types or functions
-- use export or module.export to export types or functions
-- System.js or Common.js packages resolve the module level scoope

Modules in angular
-- collection of various component like directives, pipes, services, injectables, and modules.
--there can be multiple files forming a part of angular module.
-- to access any of these components, the components should be made part of a module and the module should be loaded first. only after loading module, the other components like directives, pipes, servies etc are available.
-- functionality decomposed part of application.
-- ng(angular) modules identified using ngmodule decorator or annotation
-- ngModule Decorator defines
	-- Declaration - are a list of components, directives which are part of module
	-- Import - lists all external modules, this module is dependent on 
	-- Exports -> lists all the services, injectable and pipes used
	-- Bootstrap -> section appears only in the root or startup module.
			Typically only one module in the application will define this property. the bootstrap property 			lists the startup component to be displayed once the application is launched


{{}} --> Interpolation Syntax
----> provides one-way binding to a property or function or expression
{{ <expression> }} where the expression can be a property name, field name, method call() or a simple statement like '10 + 500' a+b or 'fieldName' || null

DataBindings in Angular
1. One-Way bindings 	- property binding, use [] for property bindings 
		   	- can also be performed with interpolation {{}}
			- event binding, use() to bind to control events.(Template->code)
2. Two-Way Binding 	- use both, property and event bindings, at the same time
			- use the [()] notation, also called as banana notation.

ng generate component component-name --skip-test=true --flat --module=app


--skip-test=true -> does not add the *.spec.js file
--flat -> does not create a folder for the component
--module=modulename -> the component entry should be included in which module
generate or g -> creating a schematic entry
component | class | module | service | pipe | directive  <= Schematic

Header Component
ng generate component ui/header --skip-tests=true --flat (module name dont need because app has only one module by default 							it will assign that only
ng g component ui/footer		(--flat will skip the creating the folder therefore footer folder is created)

CDN link --> Content Delivery Network (where url typically displayed)


Add a component called home without then tests file and without folder
ng generate component ui/home --skip-tests=true --flat
 

MV-* pattern
ModelView-whatever pattern
//add a model file in to the project 
ng generate class models/product-model --flat --skip-tests=true
ng g component products/product-home --skip-tests=true --flat 


services are components which holds data.
-- also called as injectables
-- data services are inject into the components
-- Angular maintains the service instances and injects them when needed
-- only one instances of a service is created [sigleton object]
-- add services by using "ng g service <service-name> [options]"

For Ex: 
ng generate service services/mock-product --flat --skip-tests=true

ng commands
-- ng build
-- ng build --prod newer version
-- ng lint 	(build)
-- ng serve  (debug)
-- ng test 	(runs all the spec file in app it should be executed before lint)




Angular Forms

-- two ways to develope forms-based application in angular
-- Tempdata Driven Forms
-- Reactive Forms
-- form classes are defined in a module called "FormsModule" and "ReactiveFormsModule"
-- import these two modules into the Appmodule

-- Some directives available are: ngSubmit, ngModel [2-way binding], add reference to HTML elements using # symbol
-- Validations on the Forms are based on the control states
---> pristine - the value of the control is original and the control is not touched
---> touched - when the control gains focus
---> untouched - when the control has not got the focus
---> dirty - when the value has changed
---> valid - when all the validators are successful
---> invalid - whaen any one of the validators has failed.

--> valid -> pristine -> touched -> dirty -> invalid | valid

validation attributes are not defined in angular, instead use HTML validation attributes
-- required, min, max, pattern, range, attributes have to be used.
-- 

Template driven forms perform asych updates - no control over data updates
Reactive forms perform sync updates - absolute control over when updates need to happen


--ng g component products/product-create --skip-tests=true --flat


Routing in Angular
-- Navigate support to the application
-- navigate from page to page
-- routes defined using Routing table
-- first matching route is executed
-- Routing Component integrated with the browsers history
-- Routing component are available in the library "@angular/router"
-- to use routing component, we need to add RouterModule to the application
-- class/Component/Directives that are used here are:
	Route class -> defines a route{ path: "/", component: ComponentName }
	Router Class -> collection of route object
	router-outlet component -> templaate or placeholder below which angular replaces the components that match the route
	routerLink attribute directive -> creates a route dynamically, generates a href
	routerLinkActive attributes directive -> applies the "active" CSS class
	ActivatedRoute class -> represents the selected route or the active route at a point in time
	Router class -> used to provide soft-navigation(through the code it will access the page)
(hard-navigation will hit the server by clicking some button that is forceably)

ng g component ui/page-not-found --flat --skip-tests=true --module=app

[
	{ path: "home" , component: HomeComponent },
	{ path: "home/:id", component:ContactDetailsComponent},
	{ path: "new",component: CreateContactComponent},
	{ path: "update/:id",component: UpdateContactComponent},
	{ path: "remove/:id",component: RemoveContactComponent},
	{ path: "error",component: ErrorComponent},
	{ path: "", redirectTo: "/home", pathMatch:"full"},
	{ path: "**",component: PageNotFoundComponent},
];
Additional Componets: HeaderComponent, FooterComponent.

[home, new, Something]-- links




Create Angular


npm install -g @angular/cli


ng new contat-app

/*(change to present folder)
npm install package --save*/

ng g component component-name

ng generate component component-name --skip-test=true --flat --module=app
ng generate component ui/header --skip-tests=true --flat
ng g component ui/footer
ng generate component ui/home --skip-tests=true --flat
ng generate class models/product-model --flat --skip-tests=true
ng g component products/product-home --skip-tests=true --flat
ng commands
-- ng build
-- ng build --prod newer version
-- ng lint 	(build)
-- ng serve  (debug)
-- ng test 	(runs all the spec file in app it should be executed before lint)







Routing 
Route valus have to extracted and Soft-navigation
Component to add
1. class	-> Models	-> Customer-Model	--sT
2. Service	-> Services	-> customer		--sT, --F
3. Module	-> Admin	-> admin		--flat
4. Component	-> Admin	-> customer-home, customer-list, customer-details, customer-create, customer-update									--sT, --F, --module=admin
5. Module	-> Admin	-> admin-routing

6. Guard	-> Auth		-> Auth-Guard	- module=app
7. Component	-> Auth		-> login, logout	- module=app
8. Service	-> Auth		-> authentication
9. Class 	-> Auth		-> login-model		--sT



Http Services in Angular
--  "HttpClientModule" from the "@angular/common/http" package
-- "HttpClient" -> wrapper built on top of XHR
-- "Observable" is returned by HttpClient methods
-- "Observable" object is defined in the "RxJs" package
-- "RxJs" is called the reactive extensions for javascript
-- provides async operations based on JS Promises API
-- Reative Extension support async operations, iterators, filters, maps and reduce functionalities.
-- Iterates through each element in the collection, apply filters and reducers and finally returns a data set
-- Transform one collection in one format to a collection in another format
-- Data Transformation operations are called as "Data Pipelining"
-- Subscription for the async call is required, only then the observable will execute.

-- HttpClient class provides methods for Http-Verbs like -> get,put,post,delete,
-- this.httpObj.get(....), this.httpObj.post(....)
-- var obj = this.httpObj.get(..);
-- obj.subscribe(
next: {...},
complete: {...},
error:{...}
);


CROSS ORIGIN REQUEST/RESOURCE SHARING - CROS