An Asp.NET Pge can contain:
1. Web server Controls -> begin with <asp:XXX runat="server" id="XXX" .../>
2. Every page Contains directives that begin with <%@ ...%>,
-- page , OutputCache, Assembly
3. Can contain HTML elements (runat="client")...
4. can contain script section, style section...
5. Code Expressions,
a. Inline expression	-> <%= message %>
b. Code Blocks		-> <%  ....... %>
c. Databinding expression -> <%# ...... %>
d. property binding 	-> <%$ ....... %>
6. Comment Section
a. ASP.NET Comments 	-> <%-- ....... --%>
b. HTML Comments	-> <!-- ......  -->
7. server side scripts/code blocks written using <script runt="server"> .... </script>

Page LifeCycle/Framework Events
1. Constructor is executed after the object is created
2. triggers page_Init Event -> Default values for the controls are set.
3. Page_Load event 		-> Previous values are loaded sfter Init event and now the Controls are Loaded
4. <change event> for ex: Textchanged, IndexChanged, SomethingChanged,
5. postBackEvents are like "click", :DoubleClick"
6. PreRender event  		-> just before converting the object into HTML
7. Render() method is called on the page Object, which in turn calls Render() on each of the objects/controls in the Page object, generates HTML for each object/control is collected by the page object
8. Page_unload 			-> the controls are removed from the Page Object
9. Page_Disposed  		-> the page object is cleaned up and ready for GC
				-> the response generated by the page object is flushed to the Context Object
every request to the server, creats a new page object, which executed and it is then disposed or destroyed

Seperate the Code and UI
-- Code behind concept is used to write the code and UI is seperate files
-- ASP.NET will merge the files and compile them.
-- The code-behind class file will be inherited by the UI file
-- Code files are usually named as [page].aspx.cs and UI files are[page].aspx
-- Every page class should inherit from system.Web.UI.Page class.

NameSpaces
System.Web[ASP.NET Runtime],
System.Web.UI[ASP.NET WebForm],
System.Web.UI.WebControls[ASP.NET Server controls],


Master Pages
-- create a common look and feel for the site
-- are also called as the "Chrome" and they decide the "layout" for the content.
-- inherit from System.Web.UI.MasterPage class
-- they provide contentplaceholders, the content/ child pages will have to fill in the details
-- one site can define multiple master page
-- one masterpage can inherit another master page
-- one content page (aspx) can use only one master page

BootStrap and FontAwesome -->

1. TextBox	-> TextChanged
2. Label
3. Checkbox, RadioButton -> CheckedChanged Event
4. DropDownlist, CheckboxList, RadioButtonList -> SelectedIndexChanged Event


Validation controls
-- inherit from BaseValidator class
-- performed on the client-side as well as on the server-side
-- It is mandatorily executed on the server-side, client-side is optional
-- on client-side, validations are performed using JavaScript/jQuery
-- Microsoft provides out-of-box scripts for validation or use jquery for the same
-- Properties
	-- Control validate -> id of the control,only one control can be validated using a validation control
	-- Display -> None,Static,Dynamic,
		where static means => space reserved for displayng the error message.
		Dynamic => space is created dnamically and error msg is displayed
		None => the error msg is not displayed
	-- ErrorMessage -> the msg the user sees.
	-- SetFocusOnError -> true/false
	-- Text -> alternate msg to be displayed instead of error msg. "*"
	-- EnableClientScript(2002) -> true/false - can disable JS on the client Side,

-- Child classes which inherit from BaseValidator are:
--1. RequiredFieldValidator, 2. CompareValidator, 3. RangeValidator, 4. RegularExpressionValidator, 5. CustomValidator
--6. ValidationSummary - does not inherit from basevalidator, as it does not perform any validation, instead this is used to display all error message in a page at a particular location

1. RequiredFieldValidator
-- ensures that the control has value and is not null or empty
-- Properties
	- ControlToValidate = "txtName"
	- Text = "*"
	- ErrorMessage = "Field is Required
	- ForeColor= red
	- Display ="static
	- Initial value = ensures that the user enters a value except this value

2. CompareValidator
-- compare two values or perform data type checks
-- Comparison can be done against another control or against a fixed value
-- Properties
	- ControlToValidate, Text, Display, ErrorMessage, CssClass
	- ControlToCompare - the value of this Control should be compared with target
	- ValueToCompare - a predefined value to compare against
	- Operator - Equal, NotEqual, GreaterThan, LessThan, GreaterThanOrEqual, LessThanOrEqual, DataTypeCheck
	- Type - String, Integer, Datetime, Currency,...

3. RangeValidator
-- Ensures that value entered is within the range
-- Properties
	- ControlToValidate,...
	- Minimum
	- Maximum
	- Type - string, Integer, Double, Currency, Date
-- Html attributes min, max, input type="range"

4. RegularExpressionValidator
-- matches the pattern
-- 00000 - 00000 => \d{5}-\d{5}
-- Properties
	- ControlToValidate
	- ValidationExpression = assign a valid pattern
-- UserId length should be atleast 5 chars, and it should be non-existance Id.

5. CustomValidator
-- Allows client side validation function to be included, as well as it can execute server side validation logic
-- Only validator which has Event -> ServerValidate Event
-- Used to perform any other kind of validations on client side
-- Properties
	- ControlToValidate,....
	- ClientValidationFunction = assign a valid JS function name
-- Events
	- ServerValidate event to handle server side validation

DataBound Controls
1. Repeater
2. Datalist
3. GridView
4. FormsView
5. DeatailsView
6. ListView

DataSource Controls
1. SqlDataSource
2. ObjectDataSource
3. XmlDataSource
4. EntityDataSource
5. SiteMapDataSource

1. Repeater
-- fast, forward only template-based control
-- used to dump large amount of data on the client screen
-- Template-Based Control
	- Header Template - executed only once at the beginning of rendeering
	- FooterTemplate - executed once towards the end of the rendering step
	- ItemTemplate - executed for each row in the data source, required
	- AlternatingItemTemplate - executed for every alternate row in the data source
	- SeperateTemplate - seperates the Item and AlternatingItem templates
-- Properties
	- DataSource = dataSetObject|ListObject, DataMember = tableName
-- Methods
	- DataBind --> takes each row from the data source as DataItem, finds the Item|AlternatingItem template, replaces the values in the template, and generates the output for the template
-- Events
	- ItemCreated -- event is triggered when a template is created
	- ItemDataBound -- triggered when a row is assigned to the template
	- ItemCommand -- triggered when a control whose CommandName property is set and that control is used within the repeater.


Goto the ContactSolution,
Add a new Web Application [empty -> WebForms]
In web Application, Add NugetPackages -. Bootstrap, FontAwesome,
Add Master Page
Add Content Page with a welcome message.


2. DataList
-- Template-based control
-- supports additional features like edit/update the row, delete the row, organize the rowa into tabular structure, with multiple records in a single row
-- allows select rows/records
-- Template
	- 5 template of the Repeater
	- EditItemTemplate, SelectedItemTemplate
-- Properties
	- DataSource, DataMember
	- RepeatColumns, RepeatDirection, RepeatLayout
	- SelectedIndex, SelectedItem
-- Events
	- 3 Events of the repeater
	- EditCommand, UpdateCommand,CancelCommand, DeleteCommand,
	- SelectedIndexChanged

-- DataKeys collection is a property which stores the key (PrimaryKey) values for each row. As and When it is required, we can access the key value based on the selected row number (e.Item.ItemIndex)


GridView
-- resources-heavy, programmer friendly data bound control.
-- paging support, sorting features, editing of items, deleting items, 
-- collection of field objects like BoundField, ButtonField, CommandField, HyperlinkField, ImageField,TemplateField
-- A TemplateField provides template like ItemTemplate,AlternateItemTemplate,EditItemTemplate, SelectedItemTemplate
-- Display 100 rows of 10 columns each.
	Repeater creates 100 * 1 objects ->100 objects
	DataList creates 100 * 1 objects ->100 objects
	GridView creates 100 * 10 objects ->1000 objects

	1000 object * 100 users -> 100000 objects --GV
	100 Object * 100 users -> 10000 objects - repeater/datalist


Securing ASP.NET Application
1. Authentication - check/verify the credential of the user
2. Authorization - check/verify access rights, Access Control
3. Cryptography - encrypt/decrypt communications
4. Impersonation - a user standing in for some other user (proxy)



Write From Hari Book


2. Forms Authentication
-- Provide Loogin forms and the credentials can be verified against any data source.
-- works well for local(intranet) as well as internet scnarios.
-- Mmbership provider classes can be used for everything the credentials

--- Configuration file entries
<authentcation mode="Forms">  "windows", "passport", "none", "Custom"
	<forms loginUrl-"~/login.aspx">
		<credentials passwordFormat="PlainText">
			<user name="test12" password="test22"/>
		</credentials>
	</forms>
</authentication>

<authorization>
	<deny users="?" /> ? - anonymous user , * - all users
	<allow users="*" />
</authorization>


Membership -> ASPnetSQLMembershipProvider


windows IIS Based Authentication
-- Anonymous
-- Basic -> NTML screen collects the user name and password
		password is sent in plain text.
		Basic Auth is supported by all browsers
		passes thru any firewall
		Authentication happens on the local windows serveer.
-- Digest -> Kerberos protocol for verifying credentials.
		- password are MD5 hashes - browser should understand MD5
		-- like Basic Auth, except for MD5 hashing
		Authenticates against a domain server
-- Windows -> integrated security - the currently looged in windows user credentials is passed to the server.
		firewalls block this mode of authentication
		- works well within a domain/intranet
		(integrated security = sspi)